/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations, Clone } from "@react-three/drei";
import * as THREE from "three";
import { LoopOnce } from "three";

export default function Model({ ...props }) {
  const group = useRef();
  const wallGroup = useRef();

  const [xPostion, setXPostion] = useState([]);

  const ref = useRef();
  const { nodes, materials, animations } = useGLTF("/boschbetonV102.glb");
  // const { ref, actions } = useAnimations(animations, group);
  // console.log(actions["sid-leftAction"]);

  // useEffect(() => {
  //   actions["sid-leftAction"]?.play().setLoop(THREE.LoopOnce, 0);
  //   actions["sid-rightAction"]?.play().setLoop(THREE.LoopOnce, 0);
  // }, []);

  useEffect(() => {
    setXPostion(ref.current.position);
    // console.log(x);
  }, [props.poX]);

  const createSideLoop = () => {
    let side = [];
    for (var i = 0; i < props.loop; i++) {
      var z = i;
      side[i] = [z];
    }
    return side;
  };
  // console.log('nodes["sid-right"]:', nodes["sid-right"].position);
  // console.log("ref: ", ref.current.position.x);
  // console.log("group: ", group.current.position);
  // console.log("xPostion: ", xPostion);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="car001"
          geometry={nodes.car001.geometry}
          material={materials["Material.001"]}
          position={[-1.83, 1.06, 0.11]}
          rotation={[0, -Math.PI / 2, 0]}
        />
        {/* <mesh
          name="flour001"
          geometry={nodes.flour001.geometry}
          material={nodes.flour001.material}
          position={[23.27, 0.24, -39.94]}
        /> */}
      </group>

      <group
        name="wall"
        ref={wallGroup}
        // position={[0, 0, g]} key={i}
      >
        <group name="right-left">
          {createSideLoop().map((cords, i) => (
            <>
              <mesh
                key={`right` + +i}
                // animations={LoopOnce}
                ref={ref}
                name="sid-right"
                geometry={nodes["sid-right"].geometry}
                material={nodes["sid-right"].material}
                position={[2.77 + props.poX, 0.744883, cords * -1]}
              />
              <mesh
                key={"left" + i}
                name="sid-left"
                geometry={nodes["sid-left"].geometry}
                material={nodes["sid-left"].material}
                position={[-4.73, 0.744883, cords * -1]}
                rotation={[-Math.PI, 1.57, -Math.PI]}
              />
            </>
          ))}
        </group>
        <group name="rear-wall" visible={props.v}>
          <mesh
            // visible={props.visible}
            name="rear-wall-midel"
            geometry={nodes["rear-wall-midel"].geometry}
            material={nodes["rear-wall-midel"].material}
            position={[-0.93 + props.poX / 2, 0.75, -0.71 - props.poZ + 1]}
            scale={[Math.floor(props.poX / 2 + 1), 1, 1]}
          />
          <mesh
            // visible={props.visible}
            name="rear-wall-left"
            geometry={nodes["rear-wall-left"].geometry}
            material={nodes["rear-wall-left"].material}
            position={[-3.86, 0.75, -0.71 - props.poZ + 1]}
          />
          <mesh
            // visible={props.visible}
            name="rear-Wall-right"
            geometry={nodes["rear-Wall-right"].geometry}
            material={nodes["rear-Wall-right"].material}
            position={[1.99 + props.poX, 0.75, -0.76 - props.poZ + 1]}
          />
        </group>
      </group>
      {props.areas.second && (
        <group
          name="second-wall"
          position={[9 + props.poX, 0, -0]}
          // ref={wallGroup}
          // position={[0, 0, g]} key={i}
        >
          <group name="right-left">
            {createSideLoop().map((cords, i) => (
              <>
                <mesh
                  key={`right` + i}
                  // animations={LoopOnce}
                  // ref={ref}
                  name="sid-right"
                  geometry={nodes["sid-right"].geometry}
                  material={nodes["sid-right"].material}
                  position={[2.77 + props.poX, 0.744883, cords * -1]}
                />
                <mesh
                  key={"left" + i}
                  name="sid-left"
                  geometry={nodes["sid-left"].geometry}
                  material={nodes["sid-left"].material}
                  position={[-4.73, 0.744883, cords * -1]}
                  rotation={[-Math.PI, 1.57, -Math.PI]}
                />
              </>
            ))}
          </group>
          <group name="rear-wall" visible={props.v}>
            <mesh
              // visible={props.visible}
              name="rear-wall-midel"
              geometry={nodes["rear-wall-midel"].geometry}
              material={nodes["rear-wall-midel"].material}
              position={[-0.93 + props.poX / 2, 0.75, -0.71 - props.poZ + 1]}
              scale={[Math.floor(props.poX / 2 + 1), 1, 1]}
            />
            <mesh
              // visible={props.visible}
              name="rear-wall-left"
              geometry={nodes["rear-wall-left"].geometry}
              material={nodes["rear-wall-left"].material}
              position={[-3.86, 0.75, -0.71 - props.poZ + 1]}
            />
            <mesh
              // visible={props.visible}
              name="rear-Wall-right"
              geometry={nodes["rear-Wall-right"].geometry}
              material={nodes["rear-Wall-right"].material}
              position={[1.99 + props.poX, 0.75, -0.76 - props.poZ + 1]}
            />
          </group>
        </group>
      )}

      {props.areas.third && (
        <group
          name="thrid-wall"
          position={[18 + props.poX, 0, -0]}
          // ref={wallGroup}
          // position={[0, 0, g]} key={i}
        >
          <group name="right-left">
            {createSideLoop().map((cords, i) => (
              <>
                <mesh
                  key={`right` + +i}
                  // animations={LoopOnce}
                  // ref={ref}
                  name="sid-right"
                  geometry={nodes["sid-right"].geometry}
                  material={nodes["sid-right"].material}
                  position={[2.77 + props.poX, 0.744883, cords * -1]}
                />
                <mesh
                  key={"left" + i}
                  name="sid-left"
                  geometry={nodes["sid-left"].geometry}
                  material={nodes["sid-left"].material}
                  position={[-4.73 + props.poX, 0.744883, cords * -1]}
                  rotation={[-Math.PI, 1.57, -Math.PI]}
                />
              </>
            ))}
          </group>
          <group name="rear-wall" visible={props.v}>
            <mesh
              // visible={props.visible}
              name="rear-wall-midel"
              geometry={nodes["rear-wall-midel"].geometry}
              material={nodes["rear-wall-midel"].material}
              position={[-0.93 + props.poX / 2, 0.75, -0.71 - props.poZ + 1]}
              scale={[Math.floor(props.poX / 2 + 1), 1, 1]}
            />
            <mesh
              // visible={props.visible}
              name="rear-wall-left"
              geometry={nodes["rear-wall-left"].geometry}
              material={nodes["rear-wall-left"].material}
              position={[-3.86, 0.75, -0.71 - props.poZ + 1]}
            />
            <mesh
              // visible={props.visible}
              name="rear-Wall-right"
              geometry={nodes["rear-Wall-right"].geometry}
              material={nodes["rear-Wall-right"].material}
              position={[1.99 + props.poX, 0.75, -0.76 - props.poZ + 1]}
            />
          </group>
        </group>
      )}
    </group>
  );
}

useGLTF.preload("/boschbetonV102.glb");
